}
log(c(0.96,1.11, 1.30))
diff(log(c(0.96,1.11, 1.30)))
# Q3
# Q3 requires you to repeat Q1 and Q2 in a for loop or using lapply.
lapply(1:9, sqrt)
# Q3
# Q3 requires you to repeat Q1 and Q2 in a for loop or using lapply.
squareme = function(x) x*x
lapply(1:9, squareme)
for(i in 1:9){
variance_estimates[i, "method2"] = squareme(i)
}
# Q4
# Demos of how to make scatterplots and histograms from columns in a dataframe
example_data = data.frame(x = rbinom(1000, 25, 0.5), y = rbinom(1000, 25, 0.5))
plot(example_data[["x"]], example_data[["y"]], main = "Demo scatterplot")
histogram?(example_data[["x"]], main = "Demo histogram")
histogram(example_data[["x"]], main = "Demo histogram")
hist(example_data[["x"]], main = "Demo histogram")
hist(example_data[["x"]], main = "Demo histogram", bins = 30)
hist(example_data[["x"]], main = "Demo histogram", bin = 30)
hist(example_data[["x"]], main = "Demo histogram", breaks = 30)
hist(example_data[["x"]], main = "Demo histogram", breaks = 20)
hist(example_data[["x"]], main = "Demo histogram", breaks = 5)
hist(example_data[["x"]], main = "Demo histogram", breaks = 20)
ggplot(example_data) + geom_point(aes(x=x, y=y))
# Demo of how to make the sample plots in ggplot2
library("ggplot2")
ggplot(example_data) + geom_point(aes(x=x, y=y)) + ggtitle("Example scatterplot")
ggplot(example_data) + geom_histogram(aes(x=x)) + ggtitle("Example histogram")
ggplot(example_data) + geom_histogram(aes(x=x), bins = 5) + ggtitle("Example histogram")
ggplot(example_data) + geom_histogram(aes(x=x), bins = 20) + ggtitle("Example histogram")
ggplot(example_data) + geom_histogram(aes(x=x), bins = 18) + ggtitle("Example histogram")
ggplot(example_data) + geom_histogram(aes(x=x), bins = 15) + ggtitle("Example histogram")
# Q1
genotypes = data.frame(allele_count = rbinom(1000, 2, p))
# Q2
# This demo code shows how to make, print, and modify a "dataframe", but it doesn't implement the stats methods yet.
variance_estimates = data.frame(method1 = rep(0, 4), method2 = rep(0, 4))
print(variance_estimates)
variance_estimates[2, "method1"] = 12345 # replace this with code for method 1
p = 0.12345
# Q1
genotypes = data.frame(allele_count = rbinom(1000, 2, p))
var(genotypes)
q = mean(X)
q = mean(genotypes)
# Q1
genotypes = data.frame(allele_count = rbinom(1000, 2, p))
var(genotypes)
q = mean(genotypes)
q
q = mean(genotypes[[1]])
q
q*(2-q)/2
p*(1-p)*2
p = 0.88345
# Q1
genotypes = data.frame(allele_count = rbinom(1000, 2, p))
var(genotypes)
q = mean(genotypes[[1]])
q*(2-q)/2
q
kde(rnorm(100))
density(rnorm(100))
ggplot(data.frame(x = rnorm(100))) + geom_density(aes(x = x))
library(ggplot2)
ggplot(data.frame(x = rnorm(100))) + geom_density(aes(x = x))
ggplot(data.frame(x = rnorm(100))) + geom_density(aes(x = x, fill = "magenta"))
ggplot(data.frame(x = rnorm(100))) + geom_density(aes(x = x), fill = "magenta")
ggplot(data.frame(x = rnorm(100))) + geom_density(aes(x = x), fill = "magenta")
ggplot(data.frame(x = rnorm(100))) + geom_density(aes(x = x), fill = "magenta")
ggplot(drrossidata) + geom_smooth(method = "lm", aes(x = x, y = y))
library(ggplot2)
drrossidata = data.frame(x = rnorm(100))
drrossidata$y = drrossidata$x * 2 + 10 + rnorm(100)
ggplot(drrossidata) + geom_smooth(method = "lm", aes(x = x, y = y))
drrossidata$y = drrossidata$x*0.1 + 10 + rnorm(100)
ggplot(drrossidata) + geom_smooth(method = "lm", aes(x = x, y = y))
ggplot(drrossidata) +
geom_smooth(method = "lm", aes(x = x, y = y)) +
geom_point()
ggplot(drrossidata,  aes(x = x, y = y)) +
geom_smooth(method = "lm") +
geom_point()
drrossidata$y = drrossidata$x*0.3 + 10 + rnorm(100)
ggplot(drrossidata,  aes(x = x, y = y)) +
geom_smooth(method = "lm") +
geom_point()
ggplot(drrossidata,  aes(x = x, y = y)) +
geom_smooth(method = "lm") +
geom_point() +
geom_abline(slope = 1, intercept = 0)
drrossidata$y = drrossidata$x*0.3 + rnorm(100)
ggplot(drrossidata,  aes(x = x, y = y)) +
geom_smooth(method = "lm") +
geom_point() +
geom_abline(slope = 1, intercept = 0)
#Question1
genotypes = data.frame(allele_count = rbinom(1000, 2, 0.5))
#Question 2
X=mean(rbinom(1000, 2, 0.5))
method1=var(rbinom(1000, 2, 0.5))
method2=X*(2-X)/2
print(method2)
variance=data.frame(method1,method2)
print(variance)
#Question 3
for (i in 1:1999) {
X=mean(rbinom(1000, 2, 0.9))
method1=var(rbinom(1000, 2, 0.9))
method2=X*(2-X)/2
subframe = data.frame(method1, method2)
variance=rbind(variance, subframe)
}
#Question 4
plot(variance)
hist1 <- variance$method1
hist(hist1)
hist2 <- variance$method2
hist(hist2)
#Question 4
plot(variance)
hist2 <- variance$method2
hist(hist2)
hist1 <- variance$method1
hist(hist1)
#Question 6
Variance_Estimator = function(P){
method1=var(rbinom(1000, 2, P))
X=mean(rbinom(1000, 2, P))
method2=X*(2-X)/2
variance=data.frame(method1, method2)
for (i in 1:1999) {
X=mean(rbinom(1000, 2, P))
method1=var(rbinom(1000, 2, P))
method2=X*(2-X)/2
subframe = data.frame(method1, method2)
variance=rbind(variance, subframe)
}
plot(variance)
hist1 <- variance$method1
hist(hist1)
hist2 <- variance$method2
hist(hist2)
}
Variance_Estimator(0.1)
print(variance)
Variance_Estimator(0.9)
Variance_Estimator(0.5)
Variance_Estimator(0.9)
Variance_Estimator(0.5)
# Q1
genotypes = data.frame(allele_count = rbinom(1000, 2, .6))
print(genotypes)
# Q2
variance_estimates = data.frame(method1 = rep(0,), method2 = rep(0,))
meanofac <- mean(rbinom(1000,2,.6))
variance_estimates[1, "method1"] = (sum((genotypes-meanofac)^2))/999# replace this with code for method 1
variance_estimates[1, "method2"] = (meanofac*(2-meanofac))/(2) # replace this with code for method 2
print(variance_estimates)
# Q3
for(i in 1:2000){
genotypes = data.frame(allele_count = rbinom(1000, 2, .6))
meanofac <- mean(rbinom(1000,2,.6))
variance_estimates[i, "method1"] = (sum((genotypes-meanofac)^2))/999
variance_estimates[i, "method2"] = (meanofac*(2-meanofac))/(2)
}
print(variance_estimates)
method1 <- variance_estimates[, 1]
method2 <- variance_estimates[, 2]
# Q4
plot(method1, method2, main = "Method 1 v. Method 2 scatterplot")
hist(method1, main = "Method 1 histogram", breaks = 5)
hist(method2, main = "Method 2 histogram", breaks = 5)
# Q6
allele_freq_func <- function(allele_freq) {
genotypes = data.frame(allele_count = rbinom(1000, 2, allele_freq))
variance_estimates = data.frame(method1 = rep(0,), method2 = rep(0,))
meanofac <- mean(rbinom(1000, 2, allele_freq))
variance_estimates[1, "method1"] = (sum((genotypes-meanofac)^2))/999# replace this with code for method 1
variance_estimates[1, "method2"] = (meanofac*(2-meanofac))/(2) # replace this with code for method 2
print(variance_estimates)
for(i in 1:2000) {
genotypes = data.frame(allele_count = rbinom(1000, 2, allele_freq))
meanofac <- mean(rbinom(1000,2, allele_freq))
variance_estimates[i, "method1"] = (sum((genotypes-meanofac)^2))/999
variance_estimates[i, "method2"] = (meanofac*(2-meanofac))/(2)
}
print(variance_estimates)
method1 <- variance_estimates[, 1]
method2 <- variance_estimates[, 2]
plot(method1, method2, main = "Method 1 v. Method 2 scatterplot")
hist(method1, main = "Method 1 histogram", breaks = 5)
hist(method2, main = "Method 2 histogram", breaks = 5)
}
allele_freq_func(.5)
allele_freq_func(.1)
allele_freq_func(.8)
allele_freq_func(.5)
318 - 79
log1p(2000)
log1p(6000)
summary(1:10)
which.max(table(c(1:10,10)))
rbinom(100, 1000, 5)
rbinom(100, 1000, 0.5)
rbinom(1000, 100, 0.5)
c(a, 1000000000)
a = 1:10
a
c(a, 1000000000)
# question 1
summarizeBV = function(trials, successProbability ){
estimate <- 0
variance <- 0
for (i in 0:trials)
{
probability <- dbinom (x = i, size = trials, prob = successProbability )
estimate <- estimate + i * probability
}
for ( j in 0:trials)
{
probabilityRe <- dbinom (x = j, size = trials, prob = successProbability )
variance <- variance + probabilityRe * (j-estimate)*(j - estimate)
}
return(list(estimate,variance))
}
summarizeBV(2,1/3)
# Grid of X-axis values
x <- 1:10000
# size = 80, prob = 0.2
plot(dbinom(x, size = 25, prob = 0.12345), type = "h", lwd = 2,
main = "Binomial probability function",
ylab = "P(X = x)", xlab = "Number of successes")
# Add a legend
legend("topright", legend = c("80  0.12345"),
title = "size  prob", title.adj = 0.95,
lty = 1, col = 1:3, lwd = 2, box.lty = 0)
# Grid of X-axis values
x <- 1:25
# size = 80, prob = 0.2
plot(dbinom(x, size = 25, prob = 0.12345), type = "h", lwd = 2,
main = "Binomial probability function",
ylab = "P(X = x)", xlab = "Number of successes")
# Add a legend
legend("topright", legend = c("80  0.12345"),
title = "size  prob", title.adj = 0.95,
lty = 1, col = 1:3, lwd = 2, box.lty = 0)
summarizeBV(25, 0.12345)
# 1
generateAlleleCounts = function(allele_frequency, strength_of_assortative_mating, n){
stopifnot(is.numeric(allele_frequency))
stopifnot(is.numeric(strength_of_assortative_mating))
stopifnot("strength_of_assortative_mating must be between 0 and 1" = allele_frequency > 0)
stopifnot("strength_of_assortative_mating must be between 0 and 1" = allele_frequency < 1)
extreme_assortative_mating = 2*rbinom(size = 1, prob = allele_frequency, n=n)
no_assortative_mating = rbinom(size = 2, prob = allele_frequency, n=n)
ifelse(rbinom(size = 1, prob = strength_of_assortative_mating, n),
extreme_assortative_mating,
no_assortative_mating)
}
hist(generateAlleleCounts(0.5, 0.5, 10000))
barplot(generateAlleleCounts(0.5, 0.5, 10000))
barplot(generateAlleleCounts(0.5, 0.5, 10000))
hist(generateAlleleCounts(0.5, 0.5, 10000))
hist(generateAlleleCounts(0.5, 0.5, 10000), 3)
hist(generateAlleleCounts(0.5, 0.5, 10000), 2)
hist(generateAlleleCounts(0.5, 0.5, 10000), 10)
hist(generateAlleleCounts(0.5, 0.5, 10000), breaks = ((1:4)/2)-1)
((1:4)/2)-1)
((1:4)/2)-1
((1:5)/2)-1)
hist(generateAlleleCounts(0.5, 0.5, 10000), breaks = ((1:5)/2)-1)
hist(generateAlleleCounts(0.5, 0.5, 10000), breaks = c(0, 1, 2)-0.5)
hist(generateAlleleCounts(0.5, 0.5, 10000), breaks = c(0, 1, 2, 3)-0.5)
hist(generateAlleleCounts(0.5, 0, 10000), breaks = c(0, 1, 2, 3)-0.5)
plot(variance_estimates[["method1"]], variance_estimates[["method2"]], main = "scatterplot")
# 2
x = rbinom(1000,2,0.5)
var(x)
q = mean(x)
geneotypes = data.frame(allele_count = rbinom(1000, 2, 0.5))
variance_estimates = data.frame(method1 = rep (0,1), method2 = rep(0,1))
print(variance_estimates)
variance_estimates[2, "method1"] = var(x)
variance_estimates[2, "method2"] = q*(2-q)/2
print(variance_estimates)
# 3
variance_estimates = data.frame(method1 = rep (0,1), method2 = rep (0,1))
for(i in 1:2000) {
x = rbinom(2000,2,0.5)
variance_estimates[i, "method1"] = var(x)
q = mean(x)
variance_estimates[i, "method2"] = q*(2-q)/2
}
plot(variance_estimates[["method1"]], variance_estimates[["method2"]], main = "scatterplot")
hist(variance_estimates[["method1"]], main = "method 1 histogram", breaks = 2000)
hist(variance_estimates[["method2"]], main = "method 2 histogram", breaks = 2000)
# 4: Method 2 is closer to the truth on average as most of the values are crowded around the actual value, 0.51.
# 4: Method 2 is closer to the truth on average as most of the values are crowded around the actual value, 0.51.
# 4: Method 2 is closer to the truth on average as most of the values are crowded around the actual value, 0.51.
# 4: Method 2 is closer to the truth on average as most of the values are crowded around the actual value, 0.51.
# 4: Method 2 is closer to the truth on average as most of the values are crowded around the actual value, 0.51.
# 4: Method 2 is closer to the truth on average as most of the values are crowded around the actual value, 0.51.
# 4: Method 2 is closer to the truth on average as most of the values are crowded around the actual value, 0.51.
plot(variance_estimates[["method1"]], variance_estimates[["method2"]], main = "scatterplot")
# 3
variance_estimates = data.frame(method1 = rep (0,1), method2 = rep (0,1))
for(i in 1:2000) {
x = generateAlleleCounts(0.5,0.5, 2000)
variance_estimates[i, "method1"] = var(x)
q = mean(x)
variance_estimates[i, "method2"] = q*(2-q)/2
}
plot(variance_estimates[["method1"]], variance_estimates[["method2"]], main = "scatterplot")
ggplot(data = variance_estimates) +
geom_histogram(aes(x=method1), color = "red") +
geom_histogram(aes(x=method2), color = "blue") +
ggplot(data = variance_estimates) +
geom_histogram(aes(x=method1), color = "red") +
geom_histogram(aes(x=method2), color = "blue") +
geom_vline(xintercept = 0.75)
library(ggplot2)
ggplot(data = variance_estimates) +
geom_histogram(aes(x=method1), color = "red") +
geom_histogram(aes(x=method2), color = "blue") +
geom_vline(xintercept = 0.75)
ggplot(data = variance_estimates) +
geom_histogram(aes(x=method1), fill = "red") +
geom_histogram(aes(x=method2), fill = "blue") +
geom_vline(xintercept = 0.75)
ggplot(data = variance_estimates) +
geom_histogram(aes(x=method1), fill = "red") +
geom_histogram(aes(x=method2), fill = "blue") +
geom_vline(xintercept = 0.75) +
ggtitle("With assortative mating")
# 3
variance_estimates = data.frame(method1 = rep (0,1), method2 = rep (0,1))
for(i in 1:2000) {
x = generateAlleleCounts(0.5,0, 2000)
variance_estimates[i, "method1"] = var(x)
q = mean(x)
variance_estimates[i, "method2"] = q*(2-q)/2
}
plot(variance_estimates[["method1"]], variance_estimates[["method2"]], main = "scatterplot")
hist(variance_estimates[["method1"]], main = "method 1 histogram", breaks = 2000)
hist(variance_estimates[["method2"]], main = "method 2 histogram", breaks = 2000)
ggplot(data = variance_estimates) +
geom_histogram(aes(x=method1), fill = "red") +
geom_histogram(aes(x=method2), fill = "blue") +
geom_vline(xintercept = 0.75) +
ggtitle("With assortative mating")
ggplot(data = variance_estimates) +
geom_histogram(aes(x=method1), fill = "red") +
geom_histogram(aes(x=method2), fill = "blue") +
geom_vline(xintercept = 0.5) +
ggtitle("With assortative mating")
ggplot(data = variance_estimates) +
geom_histogram(aes(x=method1), fill = "red") +
geom_histogram(aes(x=method2), fill = "blue") +
geom_vline(xintercept = 0.5) +
ggtitle("No assortative mating")
sample(strsplit("exactly"))
sample(strsplit("", "xactl"))
sample(strsplit(xactl", ""))
sample(strsplit("xactl", ""))
sample(strsplit("xactl", "")[[1]])
268/352
368/352
FizzBuzz = function(n){
output = ""
if(n %% 3 == 0){
output = paste0(output, "Fizz")
}
if(n %% 5 == 0){
output = paste0(output, "Buzz")
}
if(n %% 3 == 0 && n %% 5 == 0) {
output = paste0(output, n)
}
return(output)
}
FizzBuzz(3)
FizzBuzz(6)
FizzBuzz(5)
FizzBuzz(10)
FizzBuzz(15)
FizzBuzz(0)
FizzBuzz(-3)
FizzBuzz(60)
FizzBuzz(15)
FizzBuzz("axolotl")
FizzBuzz("axolotls are cool")
FizzBuzz(1:15)
for(i in 1:1000){
concatenated_output = paste0(FizzBuzz(1000), collapse = "")
}
print(concatenated_output)
output_frequencies = table(strsplit(concatenated_output, "")[[1]])
output_frequencies = setNames(as.data.frame(output_frequencies), c("Output", "Frequency"))
# save into a file
write.csv(output_frequencies, "output_frequencies.csv")
print(concatenated_output)
library(ggplot2)
ggplot(output_frequencies) +
geom_point(aes(x = Output, y = Frequency)) +
ggtitle("Output frequencies in FizzBuzz(1000)")
ggsave("plot1.png", width = 6, height = 5.5)
ggplot(output_frequencies) +
geom_bar(aes(x = Output, y = Frequency), stat = "identity") +
ggtitle("Output frequencies in FizzBuzz(1000)")
ggsave("plot2.png", width = 6, height = 5.5)
{
png("plot3.png", width = 600, height = 525)
pie(output_frequencies$Frequency, output_frequencies$Output, main = "Output frequencies in FizzBuzz(1000)")
dev.off()
}
ggplot(output_frequencies) +
geom_bar(aes(x = "", y = Frequency, fill = Output), stat = "identity", position = "stack") +
ggtitle("Output frequencies in FizzBuzz(1000)")
0.06^2
setwd("~/Desktop/jhu/research/projects/perturbation_prediction/cell_type_knowledge_transfer/ggrn_backend3/hyperparameter_sweeps/")
library(ggplot2)
plot_performance = function(
i,
metrics = c(
"est_B_L1_norm",
"true_G_L1_norm",
"est_G_L1_norm",
"est_G_L1_error",
"B_L1_norm",
"G_L1_norm"	,
"G_L2_error",
"num_epochs",
"walltime"
),
exclude = c("seed", "learning_rate"),
factors_varied = NULL,
factors_constant = NULL
){
performance = read.csv(paste0(i, ".csv"), row.names = 1)
metrics = intersect(metrics, names(performance))
if(is.null(factors_varied)){
factors_varied = names(performance)[sapply(performance, function(x) length(unique(x))>1)]
factors_varied = setdiff(
factors_varied,
metrics
)
factors_varied = setdiff(
factors_varied,
exclude
)
}
if(is.null(    factors_constant)){
factors_constant = names(performance)[!sapply(performance, function(x) length(unique(x))>1)]
factors_constant = setdiff(
factors_constant,
metrics
)
factors_constant = setdiff(
factors_constant,
exclude
)
}
factors_constant_string = ""
for(f in factors_constant){
factors_constant_string = paste0(factors_constant_string, f, ": ", unique(performance[[f]]), "\n")
}
for(y in metrics){
x = factors_varied[1]
if(length(factors_varied)==1){
color = "seed"
faceting_formula = NULL
}
if(length(factors_varied)==2){
color = factors_varied[2]
faceting_formula = NULL
}
if(length(factors_varied)==3){
color = factors_varied[2]
faceting_formula = paste0( " ~ ", factors_varied[3])
}
if(length(factors_varied)==4){
color = factors_varied[2]
faceting_formula = paste0(factors_varied[4], " ~ ", factors_varied[3])
}
performance[[x]] = factor(performance[[x]], levels = sort(unique(performance[[x]])))
ggplot(performance) +
geom_point(mapping = aes_string(x=x, y=y, color=color)) +
annotate(geom = "text",
hjust = 0,
label = factors_constant_string,
x = -3,
y = sqrt(max(performance[[y]], na.rm = T)*min(performance[[y]], na.rm = T))) +
annotate(geom = "point",
hjust = 0,
size=0,
alpha=0,
x = c(-3:-1),
y = c(max(performance[[y]]), max(performance[[y]], na.rm = T), min(performance[[y]], na.rm = T)))  +
ggtitle(paste0("Experiment ", i)) +
facet_grid(faceting_formula) +
scale_y_log10()
dir.create(file.path(i), showWarnings = F)
ggsave(paste0(file.path(i, y), ".pdf"), width = 7, height = 7)
}
}
for(i in 1:20){
try(plot_performance(i), silent = T)
}
