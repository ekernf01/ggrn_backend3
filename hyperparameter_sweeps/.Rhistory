# Grid of X-axis values
x <- 1:25
# size = 80, prob = 0.2
plot(dbinom(x, size = 25, prob = 0.12345), type = "h", lwd = 2,
main = "Binomial probability function",
ylab = "P(X = x)", xlab = "Number of successes")
# Add a legend
legend("topright", legend = c("80  0.12345"),
title = "size  prob", title.adj = 0.95,
lty = 1, col = 1:3, lwd = 2, box.lty = 0)
summarizeBV(25, 0.12345)
# 1
generateAlleleCounts = function(allele_frequency, strength_of_assortative_mating, n){
stopifnot(is.numeric(allele_frequency))
stopifnot(is.numeric(strength_of_assortative_mating))
stopifnot("strength_of_assortative_mating must be between 0 and 1" = allele_frequency > 0)
stopifnot("strength_of_assortative_mating must be between 0 and 1" = allele_frequency < 1)
extreme_assortative_mating = 2*rbinom(size = 1, prob = allele_frequency, n=n)
no_assortative_mating = rbinom(size = 2, prob = allele_frequency, n=n)
ifelse(rbinom(size = 1, prob = strength_of_assortative_mating, n),
extreme_assortative_mating,
no_assortative_mating)
}
hist(generateAlleleCounts(0.5, 0.5, 10000))
barplot(generateAlleleCounts(0.5, 0.5, 10000))
barplot(generateAlleleCounts(0.5, 0.5, 10000))
hist(generateAlleleCounts(0.5, 0.5, 10000))
hist(generateAlleleCounts(0.5, 0.5, 10000), 3)
hist(generateAlleleCounts(0.5, 0.5, 10000), 2)
hist(generateAlleleCounts(0.5, 0.5, 10000), 10)
hist(generateAlleleCounts(0.5, 0.5, 10000), breaks = ((1:4)/2)-1)
((1:4)/2)-1)
((1:4)/2)-1
((1:5)/2)-1)
hist(generateAlleleCounts(0.5, 0.5, 10000), breaks = ((1:5)/2)-1)
hist(generateAlleleCounts(0.5, 0.5, 10000), breaks = c(0, 1, 2)-0.5)
hist(generateAlleleCounts(0.5, 0.5, 10000), breaks = c(0, 1, 2, 3)-0.5)
hist(generateAlleleCounts(0.5, 0, 10000), breaks = c(0, 1, 2, 3)-0.5)
plot(variance_estimates[["method1"]], variance_estimates[["method2"]], main = "scatterplot")
# 2
x = rbinom(1000,2,0.5)
var(x)
q = mean(x)
geneotypes = data.frame(allele_count = rbinom(1000, 2, 0.5))
variance_estimates = data.frame(method1 = rep (0,1), method2 = rep(0,1))
print(variance_estimates)
variance_estimates[2, "method1"] = var(x)
variance_estimates[2, "method2"] = q*(2-q)/2
print(variance_estimates)
# 3
variance_estimates = data.frame(method1 = rep (0,1), method2 = rep (0,1))
for(i in 1:2000) {
x = rbinom(2000,2,0.5)
variance_estimates[i, "method1"] = var(x)
q = mean(x)
variance_estimates[i, "method2"] = q*(2-q)/2
}
plot(variance_estimates[["method1"]], variance_estimates[["method2"]], main = "scatterplot")
hist(variance_estimates[["method1"]], main = "method 1 histogram", breaks = 2000)
hist(variance_estimates[["method2"]], main = "method 2 histogram", breaks = 2000)
# 4: Method 2 is closer to the truth on average as most of the values are crowded around the actual value, 0.51.
# 4: Method 2 is closer to the truth on average as most of the values are crowded around the actual value, 0.51.
# 4: Method 2 is closer to the truth on average as most of the values are crowded around the actual value, 0.51.
# 4: Method 2 is closer to the truth on average as most of the values are crowded around the actual value, 0.51.
# 4: Method 2 is closer to the truth on average as most of the values are crowded around the actual value, 0.51.
# 4: Method 2 is closer to the truth on average as most of the values are crowded around the actual value, 0.51.
# 4: Method 2 is closer to the truth on average as most of the values are crowded around the actual value, 0.51.
plot(variance_estimates[["method1"]], variance_estimates[["method2"]], main = "scatterplot")
# 3
variance_estimates = data.frame(method1 = rep (0,1), method2 = rep (0,1))
for(i in 1:2000) {
x = generateAlleleCounts(0.5,0.5, 2000)
variance_estimates[i, "method1"] = var(x)
q = mean(x)
variance_estimates[i, "method2"] = q*(2-q)/2
}
plot(variance_estimates[["method1"]], variance_estimates[["method2"]], main = "scatterplot")
ggplot(data = variance_estimates) +
geom_histogram(aes(x=method1), color = "red") +
geom_histogram(aes(x=method2), color = "blue") +
ggplot(data = variance_estimates) +
geom_histogram(aes(x=method1), color = "red") +
geom_histogram(aes(x=method2), color = "blue") +
geom_vline(xintercept = 0.75)
library(ggplot2)
ggplot(data = variance_estimates) +
geom_histogram(aes(x=method1), color = "red") +
geom_histogram(aes(x=method2), color = "blue") +
geom_vline(xintercept = 0.75)
ggplot(data = variance_estimates) +
geom_histogram(aes(x=method1), fill = "red") +
geom_histogram(aes(x=method2), fill = "blue") +
geom_vline(xintercept = 0.75)
ggplot(data = variance_estimates) +
geom_histogram(aes(x=method1), fill = "red") +
geom_histogram(aes(x=method2), fill = "blue") +
geom_vline(xintercept = 0.75) +
ggtitle("With assortative mating")
# 3
variance_estimates = data.frame(method1 = rep (0,1), method2 = rep (0,1))
for(i in 1:2000) {
x = generateAlleleCounts(0.5,0, 2000)
variance_estimates[i, "method1"] = var(x)
q = mean(x)
variance_estimates[i, "method2"] = q*(2-q)/2
}
plot(variance_estimates[["method1"]], variance_estimates[["method2"]], main = "scatterplot")
hist(variance_estimates[["method1"]], main = "method 1 histogram", breaks = 2000)
hist(variance_estimates[["method2"]], main = "method 2 histogram", breaks = 2000)
ggplot(data = variance_estimates) +
geom_histogram(aes(x=method1), fill = "red") +
geom_histogram(aes(x=method2), fill = "blue") +
geom_vline(xintercept = 0.75) +
ggtitle("With assortative mating")
ggplot(data = variance_estimates) +
geom_histogram(aes(x=method1), fill = "red") +
geom_histogram(aes(x=method2), fill = "blue") +
geom_vline(xintercept = 0.5) +
ggtitle("With assortative mating")
ggplot(data = variance_estimates) +
geom_histogram(aes(x=method1), fill = "red") +
geom_histogram(aes(x=method2), fill = "blue") +
geom_vline(xintercept = 0.5) +
ggtitle("No assortative mating")
sample(strsplit("exactly"))
sample(strsplit("", "xactl"))
sample(strsplit(xactl", ""))
sample(strsplit("xactl", ""))
sample(strsplit("xactl", "")[[1]])
268/352
368/352
FizzBuzz = function(n){
output = ""
if(n %% 3 == 0){
output = paste0(output, "Fizz")
}
if(n %% 5 == 0){
output = paste0(output, "Buzz")
}
if(n %% 3 == 0 && n %% 5 == 0) {
output = paste0(output, n)
}
return(output)
}
FizzBuzz(3)
FizzBuzz(6)
FizzBuzz(5)
FizzBuzz(10)
FizzBuzz(15)
FizzBuzz(0)
FizzBuzz(-3)
FizzBuzz(60)
FizzBuzz(15)
FizzBuzz("axolotl")
FizzBuzz("axolotls are cool")
FizzBuzz(1:15)
for(i in 1:1000){
concatenated_output = paste0(FizzBuzz(1000), collapse = "")
}
print(concatenated_output)
output_frequencies = table(strsplit(concatenated_output, "")[[1]])
output_frequencies = setNames(as.data.frame(output_frequencies), c("Output", "Frequency"))
# save into a file
write.csv(output_frequencies, "output_frequencies.csv")
print(concatenated_output)
library(ggplot2)
ggplot(output_frequencies) +
geom_point(aes(x = Output, y = Frequency)) +
ggtitle("Output frequencies in FizzBuzz(1000)")
ggsave("plot1.png", width = 6, height = 5.5)
ggplot(output_frequencies) +
geom_bar(aes(x = Output, y = Frequency), stat = "identity") +
ggtitle("Output frequencies in FizzBuzz(1000)")
ggsave("plot2.png", width = 6, height = 5.5)
{
png("plot3.png", width = 600, height = 525)
pie(output_frequencies$Frequency, output_frequencies$Output, main = "Output frequencies in FizzBuzz(1000)")
dev.off()
}
ggplot(output_frequencies) +
geom_bar(aes(x = "", y = Frequency, fill = Output), stat = "identity", position = "stack") +
ggtitle("Output frequencies in FizzBuzz(1000)")
0.06^2
solve(matrix(c(1,1,0,0,0,0,1,1), ncol=2))
ginv(matrix(c(1,1,0,0,0,0,1,1), ncol=2))
?ginv
mass::ginv(matrix(c(1,1,0,0,0,0,1,1), ncol=2))
install.packages("mass")
MASS::ginv(matrix(c(1,1,0,0,0,0,1,1), ncol=2))
MASS::ginv(matrix(c(1,1,0,0,0,0,1,1)*sqrt(2), ncol=2))
MASS::ginv(matrix(c(1,1,0,0,0,0,1,1)*sqrt(2), ncol=2))/sqrt(2)
MASS::ginv(matrix(c(1,1,0,0,0,0,1,1)/sqrt(2), ncol=2))/sqrt(2)
MASS::ginv(matrix(c(1,1,0,0,0,0,1,1), ncol=2))
MASS::ginv(matrix(c(1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1), ncol=2))
(matrix(c(1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1), ncol=2))
(matrix(c(1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1), ncol=3))
MASS::ginv(matrix(c(1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1), ncol=3))
MASS::ginv(matrix(c(1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1)/sqrt(2), ncol=3))
ggplot(performance) +
geom_point(mapping = aes_string(x=x, y=y, color=color)) +
annotate(geom = "text",
hjust = 0,
label = factors_constant_string,
x = -3,
y = sqrt(max(performance[[y]], na.rm = T)*min(performance[[y]], na.rm = T))) +
annotate(geom = "point",
hjust = 0,
size=0,
alpha=0,
x = c(-3:-1),
y = c(max(performance[[y]]), max(performance[[y]], na.rm = T), min(performance[[y]], na.rm = T)))  +
ggtitle(paste0("Experiment ", i)) +
facet_grid(faceting_formula) +
scale_y_log10()
source("~/Desktop/jhu/research/projects/perturbation_prediction/cell_type_knowledge_transfer/ggrn_backend3/hyperparameter_sweeps/plot_optimizer_performance.R", echo=TRUE)
source("~/Desktop/jhu/research/projects/perturbation_prediction/cell_type_knowledge_transfer/ggrn_backend3/hyperparameter_sweeps/plot_optimizer_performance.R", echo=TRUE)
source("~/Desktop/jhu/research/projects/perturbation_prediction/cell_type_knowledge_transfer/ggrn_backend3/hyperparameter_sweeps/plot_optimizer_performance.R", echo=TRUE)
source("~/Desktop/jhu/research/projects/perturbation_prediction/cell_type_knowledge_transfer/ggrn_backend3/hyperparameter_sweeps/plot_optimizer_performance.R", echo=TRUE)
i = 23
performance = read.csv(paste0(i, ".csv"), row.names = 1)
performance
source("~/Desktop/jhu/research/projects/perturbation_prediction/cell_type_knowledge_transfer/ggrn_backend3/hyperparameter_sweeps/plot_optimizer_performance.R", echo=TRUE)
setwd("~/Desktop/jhu/research/projects/perturbation_prediction/cell_type_knowledge_transfer/ggrn_backend3/hyperparameter_sweeps/")
library(ggplot2)
plot_performance = function(
i,
metrics = c(
"est_B_L1_norm",
"true_G_L1_norm",
"est_G_L1_norm",
"est_G_L1_error",
"true_G.S_L1_norm",
"est_G.S_L1_norm",
"est_G.S_L1_error",
"B_L1_norm",
"G_L1_norm"	,
"G_L2_error",
"num_epochs",
"walltime"
),
exclude = c("seed", "learning_rate"),
factors_varied = NULL,
factors_constant = NULL
){
performance = read.csv(paste0(i, ".csv"), row.names = 1)
metrics = intersect(metrics, names(performance))
if(is.null(factors_varied)){
factors_varied = names(performance)[sapply(performance, function(x) length(unique(x))>1)]
factors_varied = setdiff(
factors_varied,
metrics
)
factors_varied = setdiff(
factors_varied,
exclude
)
}
if(is.null(    factors_constant)){
factors_constant = names(performance)[!sapply(performance, function(x) length(unique(x))>1)]
factors_constant = setdiff(
factors_constant,
metrics
)
factors_constant = setdiff(
factors_constant,
exclude
)
}
factors_constant_string = ""
for(f in factors_constant){
factors_constant_string = paste0(factors_constant_string, f, ": ", unique(performance[[f]]), "\n")
}
for(y in metrics){
x = factors_varied[1]
if(length(factors_varied)==1){
color = "seed"
faceting_formula = NULL
}
if(length(factors_varied)==2){
color = factors_varied[2]
faceting_formula = NULL
}
if(length(factors_varied)==3){
color = factors_varied[2]
faceting_formula = paste0( " ~ ", factors_varied[3])
}
if(length(factors_varied)==4){
color = factors_varied[2]
faceting_formula = paste0(factors_varied[4], " ~ ", factors_varied[3])
}
performance[[x]] = factor(performance[[x]], levels = sort(unique(performance[[x]])))
ggplot(performance) +
geom_point(mapping = aes_string(x=x, y=y, color=color)) +
annotate(geom = "text",
hjust = 0,
label = factors_constant_string,
x = -3,
y = sqrt(max(performance[[y]], na.rm = T)*min(performance[[y]], na.rm = T))) +
annotate(geom = "point",
hjust = 0,
size=0,
alpha=0,
x = c(-3:-1),
y = c(max(performance[[y]]), max(performance[[y]], na.rm = T), min(performance[[y]], na.rm = T)))  +
ggtitle(paste0("Experiment ", i)) +
facet_grid(faceting_formula) +
scale_y_log10()
dir.create(file.path(i), showWarnings = F)
ggsave(paste0(file.path(i, y), ".pdf"), width = 7, height = 7)
}
}
for(i in 1:200){
try(plot_performance(i), silent = T)
}
warnings()
i = 25
plot_performance = function(
i,
metrics = c(
"est_B_L1_norm",
"true_G_L1_norm",
"est_G_L1_norm",
"est_G_L1_error",
"true_G.S_L1_norm",
"est_G.S_L1_norm",
"est_G.S_L1_error",
"B_L1_norm",
"G_L1_norm"	,
"G_L2_error",
"num_epochs",
"walltime"
),
exclude = c("seed", "learning_rate"),
factors_varied = NULL,
factors_constant = NULL
){
performance = read.csv(paste0(i, ".csv"), row.names = 1)
metrics = intersect(metrics, names(performance))
if(is.null(factors_varied)){
factors_varied = names(performance)[sapply(performance, function(x) length(unique(x))>1)]
factors_varied = setdiff(
factors_varied,
metrics
)
factors_varied = setdiff(
factors_varied,
exclude
)
}
if(is.null(    factors_constant)){
factors_constant = names(performance)[!sapply(performance, function(x) length(unique(x))>1)]
factors_constant = setdiff(
factors_constant,
metrics
)
factors_constant = setdiff(
factors_constant,
exclude
)
}
factors_constant_string = ""
for(f in factors_constant){
factors_constant_string = paste0(factors_constant_string, f, ": ", unique(performance[[f]]), "\n")
}
for(y in metrics){
x = factors_varied[1]
if(length(factors_varied)==1){
color = "seed"
faceting_formula = NULL
}
if(length(factors_varied)==2){
color = factors_varied[2]
faceting_formula = NULL
}
if(length(factors_varied)==3){
color = factors_varied[2]
faceting_formula = paste0( " ~ ", factors_varied[3])
}
if(length(factors_varied)==4){
color = factors_varied[2]
faceting_formula = paste0(factors_varied[4], " ~ ", factors_varied[3])
}
performance[[x]] = factor(performance[[x]], levels = sort(unique(performance[[x]])))
ggplot(performance) +
geom_point(mapping = aes_string(x=x, y=y, color=color)) +
annotate(geom = "text",
hjust = 0,
label = factors_constant_string,
x = -3,
y = sqrt(max(performance[[y]], na.rm = T)*min(performance[[y]], na.rm = T))) +
annotate(geom = "point",
hjust = 0,
size=0,
alpha=0,
x = c(-3:-1),
y = c(max(performance[[y]]), max(performance[[y]], na.rm = T), min(performance[[y]], na.rm = T)))  +
ggtitle(paste0("Experiment ", i)) +
facet_grid(faceting_formula) +
scale_y_log10()
dir.create(file.path(i), showWarnings = F)
ggsave(paste0(file.path(i, y), ".pdf"), width = 7, height = 7)
}
}
try(plot_performance(i), silent = T)
performance = read.csv(paste0(i, ".csv"), row.names = 1)
performance
colnames(performance)
performance = read.csv(paste0(i, ".csv"), row.names = 1)
metrics = intersect(metrics, names(performance))
metrics = c(
"est_B_L1_norm",
"true_G_L1_norm",
"est_G_L1_norm",
"est_G_L1_error",
"true_G.S_L1_norm",
"est_G.S_L1_norm",
"est_G.S_L1_error",
"B_L1_norm",
"G_L1_norm"	,
"G_L2_error",
"est_Q_L1_error",
"est_F_L1_error",
"est_QR_constraint_violation",
"num_epochs",
"walltime"
)
exclude = c("seed", "learning_rate")
factors_varied = NULL
factors_constant = NULL
performance = read.csv(paste0(i, ".csv"), row.names = 1)
metrics = intersect(metrics, names(performance))
if(is.null(factors_varied)){
factors_varied = names(performance)[sapply(performance, function(x) length(unique(x))>1)]
factors_varied = setdiff(
factors_varied,
metrics
)
factors_varied = setdiff(
factors_varied,
exclude
)
}
if(is.null(    factors_constant)){
factors_constant = names(performance)[!sapply(performance, function(x) length(unique(x))>1)]
factors_constant = setdiff(
factors_constant,
metrics
)
factors_constant = setdiff(
factors_constant,
exclude
)
}
factors_constant_string = ""
for(f in factors_constant){
factors_constant_string = paste0(factors_constant_string, f, ": ", unique(performance[[f]]), "\n")
}
for(y in metrics){
x = factors_varied[1]
if(length(factors_varied)==1){
color = "seed"
faceting_formula = NULL
}
if(length(factors_varied)==2){
color = factors_varied[2]
faceting_formula = NULL
}
if(length(factors_varied)==3){
color = factors_varied[2]
faceting_formula = paste0( " ~ ", factors_varied[3])
}
if(length(factors_varied)==4){
color = factors_varied[2]
faceting_formula = paste0(factors_varied[4], " ~ ", factors_varied[3])
}
performance[[x]] = factor(performance[[x]], levels = sort(unique(performance[[x]])))
ggplot(performance) +
geom_point(mapping = aes_string(x=x, y=y, color=color)) +
annotate(geom = "text",
hjust = 0,
label = factors_constant_string,
x = -3,
y = sqrt(max(performance[[y]], na.rm = T)*min(performance[[y]], na.rm = T))) +
annotate(geom = "point",
hjust = 0,
size=0,
alpha=0,
x = c(-3:-1),
y = c(max(performance[[y]]), max(performance[[y]], na.rm = T), min(performance[[y]], na.rm = T)))  +
ggtitle(paste0("Experiment ", i)) +
facet_grid(faceting_formula) +
scale_y_log10()
dir.create(file.path(i), showWarnings = F)
ggsave(paste0(file.path(i, y), ".pdf"), width = 7, height = 7)
}
warnings()
ggplot(performance) +
geom_point(mapping = aes_string(x=x, y=y, color=color)) +
annotate(geom = "text",
hjust = 0,
label = factors_constant_string,
x = -3,
y = sqrt(max(performance[[y]], na.rm = T)*min(performance[[y]], na.rm = T))) +
annotate(geom = "point",
hjust = 0,
size=0,
alpha=0,
x = c(-3:-1),
y = c(max(performance[[y]]), max(performance[[y]], na.rm = T), min(performance[[y]], na.rm = T)))  +
ggtitle(paste0("Experiment ", i)) +
facet_grid(faceting_formula) +
scale_y_log10()
